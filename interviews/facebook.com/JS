JS
1. timeouts, prototypes, the DOM, and your knowledge about different javascript collections
2. prototypal inheritance
3. ES6 Promises
4. advantages of using ES6 maps over objects? What about using ES6 sets over arrays?
5. difference between call and apply, map and forEach, etc.
6. what is 'this', what is closure, var vs const vs let, DOM tree
7. Basic JS questions about closure, map funciton, forEach function, apply function, call function, DOM tree, difference between array and object.
8. implement a simple Observable
9. Create Emitter
        /*
        emitter = new Emitter();

        // 1. Support subscribing to events.
        sub = emitter.subscribe('event_name', callback);
        sub2 = emitter.subscribe('event_name', callback2);

        // 2. Support emitting events.
        // This particular example should lead to the `callback` above being invoked with `foo` and `bar` as parameters.
        emitter.emit('event_name', foo, bar);

        // 3. Support unsubscribing existing subscriptions by releasing them.
        sub.release(); // `sub` is the reference returned by `subscribe` above

10. what is event propagation, what is a time complexity to traverse the balanced binary tree
11. Given input:
        `
        // could be potentially more than 3 keys in the object above
        items = [
        {color: 'red', type: 'tv', age: 18},
        {color: 'silver', type: 'phone', age: 20}
        ...
        ]

        excludes = [
        {k: 'color', v: 'silver'},
        {k: 'type', v: 'tv'},
        ....
        ]
        function excludeItems(items, excludes) {
        excludes.forEach(pair => {
        items = items.filter(item => item[pair.k] === item[pair.v]);
        });
        return items;
        }

        1. Describe what this function is doing...
        2. What is wrong with that function ?
        3. How would you optimize it ?
`

12. event bubbling, debounce (its variant), throttle.
13. How many times would `addEventListener('scroll', handleScroll);` run as the user looks at their News Feed? And what would be user experience if the `handleScroll` function takes 100ms to execute.
        Related to question 1, how could you implement debouncing? Say you wanted the `handleScroll` function to be called only after 200ms has passed between scroll events.
14. Given a picture, how would you hide/show a child picture on hovering on this parent?
    How would you ensure clicking on this picture would go to a specific link?
    How would you ensure the child is positioned in the top right of the parent picture?
15. Implement a hash table.

Look for an element in a specific HTML structure.
- Time complexity

what is a difference between Object and Array, call and apply, what is DOM structure, what is time complexity of traversing through the DOM, other very basic questions.
he second question was about setTimeout browser api, you will be asked to clean all timeouts, the answer is to override setTimeout and store all of them in stuck and clean them if needed.

Animate a given element using JS across any given time frame


includes/excludes array question (you can find the complete questions on the forum)

Difference between == and === javascript
